#pragma checksum "C:\Users\ble24\Documents\Projects\junction2022\Mayflower\Pages\_Host.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a246b18a2d5c4b2fa916ee32a73772cb11f89f30"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Mayflower.Pages.Pages__Host), @"mvc.1.0.razor-page", @"/Pages/_Host.cshtml")]
namespace Mayflower.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute("RouteTemplate", "/")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a246b18a2d5c4b2fa916ee32a73772cb11f89f30", @"/Pages/_Host.cshtml")]
    #nullable restore
    public class Pages__Host : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onload", new global::Microsoft.AspNetCore.Html.HtmlString("windowOnLoad();"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.SingleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 4 "C:\Users\ble24\Documents\Projects\junction2022\Mayflower\Pages\_Host.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a246b18a2d5c4b2fa916ee32a73772cb11f89f303894", async() => {
                WriteLiteral("\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Mayflower</title>\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("base", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "a246b18a2d5c4b2fa916ee32a73772cb11f89f304306", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <link rel=""stylesheet"" href=""css/bootstrap/bootstrap.min.css"" />
    <link href=""css/site.css"" rel=""stylesheet"" />
    
    <script type='text/javascript' src='https://www.bing.com/api/maps/mapcontrol?key=Ak6D72Y-hfnjUQ4GlPQlg-oFGlAZhkp5tLAfRZu7VO28wvEY8gixYCTTqrag1Xo-'></script>
    
    <script type=""module"">
        import { initializeApp } from ""https://www.gstatic.com/firebasejs/9.9.3/firebase-app.js"";
        import { get, getDatabase, ref, set, push, onChildAdded } from ""https://www.gstatic.com/firebasejs/9.9.3/firebase-database.js"";
        import { getStorage, uploadBytesResumable, getDownloadURL, ref as sRef } from ""https://www.gstatic.com/firebasejs/9.9.3/firebase-storage.js"";

        // Your web app's Firebase configuration
        const firebaseConfig = {
            apiKey: ""AIzaSyBTtufp4biNSg_a-Uy_iYeC7fyZ_s6NFyg"",
            authDomain: ""mayflower-8bfa3.firebaseapp.com"",
            databaseURL: ""https://mayflower-8bfa3-default-rtdb.asia-southeast1.firebasedatabase.app"",");
                WriteLiteral(@"
            projectId: ""mayflower-8bfa3"",
            storageBucket: ""mayflower-8bfa3.appspot.com"",
            messagingSenderId: ""77591230967"",
            appId: ""1:77591230967:web:4effd8d4cb7d3c8e4196f2""
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);

        const db = getDatabase(app);
        const markersRef = ref(db, '/markers/');

        window.sRef = sRef;
        window.markersRef = markersRef;
        window.push = push;
        window.get = get;
        window.onChildAdded = onChildAdded;
        window.storage = getStorage(app);
        window.ubr = uploadBytesResumable;
        window.gdu = getDownloadURL;
    </script>

    <script type='text/javascript'>
        var map = null;
        var infoboxCreated = null;
        var polygons = [];
        var markers = {};
        var file = null;

        var infoBoxToAdd = {
            ""title"": null,
            ""count"": null,
            ""image"": null,
            """);
                WriteLiteral(@"longitude"": null,
            ""latitude"": null,
            ""username"": null
        };
        var infoBoxToShow = {
            ""title"": null,
            ""count"": null,
            ""image"": null,
            ""longitude"": null,
            ""latitude"": null,
            ""username"": null
        };

        function readMarkers() {
            window.get(window.markersRef).then((snapshot) => {
                if (snapshot.exists()) {
                    markers = snapshot.val();
                    // draw markers
                    for (var key in markers) {
                        createPin('orange',
                            new Microsoft.Maps.Location(
                                markers[key].latitude,
                                markers[key].longitude
                            ), key);
                    }
                } else {
                    console.log(""No data available"");
                }
            }).catch((error) => {
                console.err");
                WriteLiteral(@"or(error);
            });

            window.onChildAdded(window.markersRef, 
                (data) => {
                    markers[data.key] = data.val();
                    if (map != null) {
                        const location = new Microsoft.Maps.Location(data.val().latitude, data.val().longitude);
                        createPin('red', location, data.key);
                    }
                }
            );
        }

        async function parseJSON() {
            const response = await fetch(""assets/data.json"");
            const jsonObj = await response.json();

            for (var key in jsonObj) {
                const arr = jsonObj[key];
                let polygon = [];
                for (var i = 0; i < arr.length; i++) {
                    let point = arr[i];
                    let location = new Microsoft.Maps.Location(point[1]-0.4515, point[0]);
                    polygon.push(location);
                }
                polygons.push(polygon);
   ");
                WriteLiteral(@"         }
            //console.log(json);
        }
        async function windowOnLoad() {
            document.body.style.backgroundColor = ""#000000"";

            await parseJSON();

            var width = window.innerWidth;
            var height = window.innerHeight;

            var w = ""width:"" + (width * 0.5).toString() + ""px"";
            var h = ""height:"" + (width * 0.5).toString() + ""px"";
            document.getElementById('loading').setAttribute(""style"", w + "";"" + h + "";"" + ""display: block; margin-left: auto; margin-right: auto;"");

            loadMapScenario();
            setTimeout(function(){
                document.getElementById(""loadingPopup"").style.display = ""none"";
                document.getElementById(""myMap"").style.display = ""block"";
            }, 2000);
        }

        function loadMapScenario() {
            var width = window.innerWidth;
            var height = window.innerHeight;

            var w = ""width:"" + width.toString() + ""px"";
       ");
                WriteLiteral(@"     var h = ""height:"" + height.toString() + ""px"";

            document.getElementById('myMap').setAttribute(""style"", w+"";""+h+"";"");
            map = new Microsoft.Maps.Map(document.getElementById('myMap'), {
                center: new Microsoft.Maps.Location(37.51024272873559, 126.97668746768724),
                allowHidingLabelsOfRoad: true,
                mapTypeId: Microsoft.Maps.MapTypeId.aerial,
                zoom: 10,
                showLocateMeButton: true,
                enableClickableLogo: false
            }
            );
            map.setView({ labelOverlay: Microsoft.Maps.LabelOverlay.hidden });

            //map binding
            Microsoft.Maps.Events.addHandler(map, 'click',
                function (e) {
                    handleClick(e);
                }
            );

            // draw polygons
            for (var i = 0; i < polygons.length; i++) {
                var polygon = new Microsoft.Maps.Polygon(polygons[i], {
                    fillColo");
                WriteLiteral(@"r: 'rgba(0, 255, 0, 0.5)',
                    strokeColor: 'red',
                    strokeThickness: 2
                });
                //Add the polygon to map
                map.entities.push(polygon);
            }

            readMarkers();

        }

        //function createInfobox(title, )

        function uploadImgFromInfoBox(){
            document.getElementById('image-input').click();
        }

        function createPin(pinColor, location, key) {
            var pin = new Microsoft.Maps.Pushpin(location,
                {
                    color: pinColor
                }
            );
            Microsoft.Maps.Events.addHandler(pin, 'click', 
                function () {
                    const marker = markers[key];
                    console.log(marker);
                    const location = new Microsoft.Maps.Location(
                        marker.latitude,
                        marker.longitude
                    );
                    ");
                WriteLiteral(@"
                    var infobox = new Microsoft.Maps.Infobox(location, {
                        title: marker.title + "" - By. "" + marker.username,
                        showCloseButton: true
                    });

                    infobox.setMap(map);
                }
            );
            map.entities.push(pin);

            closeInfoBox();
        }

        function clearInfoBoxToAdd() {
            infoBoxToAdd = {
                ""title"": null,
                ""count"": null,
                ""image"": null,
                ""longitude"": null,
                ""latitude"": null,
                ""username"": null
            };
        }

        function showInfoBox() {

        }

        function uploadImgFromInfoBox() {
            var fileUpload = document.getElementById(""image-input"");
            fileUpload.addEventListener('change', function (evt) {
                file = evt.target.files[0]; // upload the first file only
                console.log(file);
");
                WriteLiteral(@"            })
            document.getElementById(""image-input"").click();
        }

        function generateInfoBox() {
            const filename = file.name.split(""."")[0];
            const storageRef = window.sRef(window.storage, '/scenes/' + filename);
            const uploadTask = window.ubr(storageRef, file);
            window.gdu(uploadTask.snapshot.ref).then((url) => {
                // get infobox info to add
                infoBoxToAdd[""title""] = document.getElementById(""infoboxTitle"").value;
                infoBoxToAdd[""image""] = url;
                infoBoxToAdd[""longitude""] = infoboxCreated.getLocation().longitude;
                infoBoxToAdd[""latitude""] = infoboxCreated.getLocation().latitude;
                infoBoxToAdd[""username""] = document.getElementById(""infoboxUser"").value;;

                const pin_key = window.push(window.markersRef, infoBoxToAdd).key;

                clearInfoBoxToAdd();
              //console.log(url);
            });

            //");
                WriteLiteral(@"const file = document.getElementById(""image-input"").value;
            //const filename = document.getElementById(""image-input"").files[0].name;
            //console.log(filename);
            
            //const uploadTask = window.ubr(storageRef, file);
            //window.gdu(uploadTask.snapshot.ref).then((url) => {
              //  console.log(url);
           // });

            
        }

        function closeInfoBox() {
            if (infoboxCreated != null) {
                infoboxCreated.setMap(null);
                infoboxCreated = null;
            }
        }

        function handleClick(e) {
            if (infoboxCreated != null) {
                closeInfoBox();
            }

            var point = new Microsoft.Maps.Point(e.pageX, e.pageY);
            var clickedLocation = map.tryPixelToLocation(point, Microsoft.Maps.PixelReference.control);
            
            var infoboxTemplate = '<div id=""infoboxText"" style=""background-color:White; border-style:s");
                WriteLiteral(@"olid; border-width:medium; border-color:DarkOrange; min-height:70px; width: 100px;"">' +
                '<input type=""text"" placeholder=""<title>"" id=""infoboxTitle"" style=""top: 10px; left: 10px; margin-bottom: 10px; bottom: 20px; width: 90px;display: block;margin-left: auto;margin-right: auto;""></input>' +
                '<input type=""text"" placeholder=""<username>"" id=""infoboxUser"" style=""top: 10px; left: 10px; margin-bottom: 10px; bottom: 20px; width: 80px;display: block;margin-left: auto;margin-right: auto;""></input>' +
                '<button style=""display: block; margin-bottom: 10px; margin-left: auto; margin-right: auto; bottom: 20px"">👍(0)</button>' +
                '<button onclick=""uploadImgFromInfoBox()"" style=""display: block; margin-bottom: 10px; margin-left: auto; margin-right: auto;"">Upload</button>' +
                '<button onclick=""generateInfoBox()"" style=""display: block; margin-bottom: 10px; margin-left: auto; margin-right: auto;"">Save</button>' +
                '<button onclick=""c");
                WriteLiteral(@"loseInfoBox()"" name=""new"" style=""display: block;margin-left: auto;margin-right: auto;"">Close</button>' +
                '</div>';
          
            
            infoboxCreated = new Microsoft.Maps.Infobox(
                clickedLocation, 
                { 
                    htmlContent: infoboxTemplate
                }
            );

            infoboxCreated.setMap(map);
        }


    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a246b18a2d5c4b2fa916ee32a73772cb11f89f3018364", async() => {
                WriteLiteral(@"
    <div id=""loadingPopup"" class=""center-screen"">
        <h1 style=""color:white"">Loading...</h1>
        <img id=""loading"" src=""https://c.tenor.com/ZAw_hz_GBBsAAAAd/rain.gif"" />
    </div>
        
    <div style=""display:none;"" class=""animate-bottom"" id='myMap'></div>
    <input type=""file"" id=""image-input"" capture=""camera"" accept =""image/jpeg, image/png, image/jpg"" hidden>
    
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Pages__Host> Html { get; private set; } = default!;
        #nullable disable
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages__Host> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages__Host>)PageContext?.ViewData;
        public Pages__Host Model => ViewData.Model;
    }
}
#pragma warning restore 1591
